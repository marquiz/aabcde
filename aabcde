#!/usr/bin/python
#
# Copyright (C) 2015 Markus Lehtonen <knaeaepae@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.
"""A simple script for converting audiobook CDs into m4b"""

import argparse
import json
import logging
import os
import re
import readline
import shutil
import subprocess
import sys


class MyError(Exception):
    """Local errors"""
    pass


def ask_value(msg, validator_func, default=None):
    """Ask user input"""
    if default is not None:
        msg = msg + ' [%s]'
    while True:
        value = raw_input('%s ' % msg.encode('utf-8'))
        if not value and default is not None:
            value = default
        try:
            if validator_func(value):
                return value.decode('utf-8')
        except ValueError:
            pass

        logging.warn("\nNot a valid value (according to %s()): '%s'" %
                     (validator_func.__name__, value))

def ask_conf():
    """Ask for audiobook metadata"""
    conf = {}
    conf['title'] = ask_value('Book title?', str)
    conf['author'] = ask_value('Book author?', str)
    #conf['narrator'] = ask_value('Narrator?', str)
    conf['year'] = int(ask_value('Year?', int))
    conf['num_discs'] = int(ask_value('Number of discs?', int))
    conf['toc'] = {}
    conf['status'] = {}
    return conf


def read_conf(conf_file):
    """Read configuration/metadata/status file"""
    if os.path.isfile(conf_file):
        with open(conf_file) as f:
            return json.load(f)
    else:
        return ask_conf()

def write_conf(conf, conf_file):
    """Write configuration/metadata/status file"""
    with open(conf_file, 'w') as f:
        json.dump(conf, f, indent=4, sort_keys=True)

def run_cmd(cmd, capture_stdout=False, capture_stderr=False):
    """Run command"""
    stdout = subprocess.PIPE if capture_stdout else None
    stderr = subprocess.PIPE if capture_stderr else None
    logging.debug("Running command: '%s'", ' '.join(cmd))
    popen = subprocess.Popen(cmd, stdout=stdout, stderr=stderr)
    stdout, stderr = popen.communicate()
    ret_out = stdout.splitlines() if stdout else stdout
    ret_err = stderr.splitlines() if stderr else stderr
    if popen.returncode:
        err_detail = ': ' + stderr if stderr else ''
        raise MyError("Command '%s' failed%s" % (' '.join(cmd), err_detail))
    return (ret_out, ret_err)

def convert_timecode(stamp):
    """Convert cdparanoia timecodes into Quicktime format"""
    m, s = stamp.split(':')
    s, ms = s.split('.')
    h = int(int(m) / 60)
    m = int(m) - 60 * h

    return "%02d:%02d:%02d.%03d" % (h, m, int(s), int(ms))

def get_disc_toc():
    """Get disc content (track list)"""
    logging.info('Reading disc information...')
    tracks = {}
    _, stderr = run_cmd(['cdparanoia', '-Q'], True, True)
    for line in stderr:
        if re.match(r'\s+\d', line):
            fields = line.strip().split()
            tracks[str(int(fields[0][:-1]))] = \
                convert_timecode(fields[4].strip('[]'))
    return tracks

def mkdir(directory):
    """Create directory hierarchy"""
    directory = os.path.abspath(directory)
    if not os.path.isdir(directory):
        os.makedirs(directory)
    return directory

def check_disc_status(conf, discnum):
    """Check if parts of disc needs to be extracted"""
    discid = 'CD%02d' % discnum
    if (discid not in conf['status'] or
        conf['status'][discid]['disc_status'] != 'ready'):
        return False
    if discid not in conf['toc']:
        return False
    toc = conf['toc'][discid]
    for tracknum in sorted(toc, key=int):
        if conf['status'][discid]['track_status'][tracknum] != 'ready':
            return False
    if not os.path.isfile('disc-%d.m4b' % discnum):
        return False

    return True

def wait_for_disc(verbose=False):
    """Wait until an audio CD is inserted into the drive"""
    import time
    if verbose:
        logging.info('Waiting for CD...')
    while True:
        try:
            run_cmd(['cdparanoia', '-Q'], True, True)
            time.sleep(1)
        except MyError:
            pass
        else:
            return

def cat_aac(in_files, out_file, verbose):
    """Concatenate AAC files"""
    capture_output = not verbose
    cat_args = []
    for fname in in_files:
        cat_args.extend(['-cat', fname])
    run_cmd(['MP4Box'] + cat_args + [out_file], capture_output,
            capture_output)

def rip_disc(conf, discnum, verbose=False):
    """Extract and encode one disc"""
    capture_output = not verbose
    orig_dir = os.path.abspath(os.curdir)
    discid = 'CD%02d' % discnum

    # Create workdir
    if not os.path.isdir(discid):
        os.makedirs(discid)
    os.chdir(discid)

    if not discid in conf['status']:
        conf['status'][discid] = {}
        conf['status'][discid]['track_status'] = {}
        conf['status'][discid]['disc_status'] = 'cat'
    disc_status = conf['status'][discid]
    track_statuses = disc_status['track_status']

    # Get TOC
    if not discid in conf['toc']:
        conf['toc'][discid] = get_disc_toc()
    toc = conf['toc'][discid]

    # Rip tracks
    track_files = []
    for tracknum in sorted(toc, key=int):
        aac = "track-%s.aac" % tracknum
        track_files.append(aac)

        if not tracknum in track_statuses:
            track_statuses[tracknum] = 'rip'
        if track_statuses[tracknum] == 'ready':
            continue

        # Reset disc status if something has to be done on the tracks
        disc_status['disc_status'] = 'cat'

        if track_statuses[tracknum] == 'rip':
            logging.info('Reading track %s...', tracknum)
            run_cmd(['cdparanoia', '-B', '-Z', '--never-skip=40', tracknum],
                    capture_output, capture_output)
            run_cmd(['eject', '-x', '40'])
            track_statuses[tracknum] = 'encode'
        if track_statuses[tracknum] == 'encode':
            wav = "track%02d.cdda.wav" % int(tracknum)
            logging.info('Encoding track %s...', tracknum)
            run_cmd(['faac', '-q', '60', '-o', aac, wav], capture_output,
                    capture_output)
            os.unlink(wav)
            track_statuses[tracknum] = 'ready'
        if track_statuses[tracknum] != 'ready':
            raise MyError("BUG: Invalid track status: %s" %
                          track_statuses[tracknum])

    # Concatenate tracks
    mp4_file = '../disc-%d.m4b' % discnum
    if disc_status['disc_status'] == 'cat':
        logging.info('Concatenating tracks')
        cat_aac(track_files, 'disc.aac', verbose)
        disc_status['disc_status'] = 'add'
    if disc_status['disc_status'] == 'add':
        # Write TOC file
        with open('chapters.txt', 'w') as f:
            for i in sorted(toc, key=int):
                f.write("%s Disc %d - Track %s\n" % (toc[i], discnum, i))
        # Create container
        logging.info('Creating MP4 container')
        run_cmd(['MP4Box', '-chap', 'chapters.txt', '-add', 'disc.aac',
                 mp4_file],
                capture_output, capture_output)
        disc_status['disc_status'] = 'tag'
    if disc_status['disc_status'] == 'tag':
        logging.info('Tagging MP4 container')
        run_cmd(['mp4tags', '-album', conf['title'], '-artist', conf['author'],
                 '-disk', str(discnum), '-disks', str(conf['num_discs']),
                 '-genre', 'Audiobooks', '-song', 'Disc %d' % discnum,
                 '-year', str(conf['year']), '-writer', conf['author'],
                 mp4_file],
                capture_output)
        disc_status['disc_status'] = 'cleanup'
    if disc_status['disc_status'] == 'cleanup':
        logging.info('Cleaning up temporary files of Disc %d...', discnum)
        os.chdir(orig_dir)
        shutil.rmtree(discid)
        disc_status['disc_status'] = 'ready'
    if disc_status['disc_status'] != 'ready':
        raise MyError("BUG: Invalid disc status: %s" %
                      disc_status['disc_status'])

def concat_discs(conf, tgt_file, verbose):
    """Concatenate all disks into one"""
    disc_files = ['disc-%d.m4b' % i for i in xrange(1, conf['num_discs'] + 1)]
    logging.debug('Concatenating %s -> %s' % (disc_files, tgt_file))
    cat_aac(disc_files, tgt_file, verbose)
    logging.debug('Tagging combined file')
    run_cmd(['mp4tags', '-album', conf['title'], '-artist', conf['author'],
             '-genre', 'Audiobooks', '-song', conf['title'],
             '-year', str(conf['year']), '-writer', conf['author'],
             tgt_file], not verbose)

def parse_arguments(argv):
    """Parse command line arguments"""
    parser = argparse.ArgumentParser()
    parser.add_argument('-q', '--quiet', action='store_true',
                        help='Be as quiet as possible')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='Verbose output')
    parser.add_argument('-o', '--output-dir',
                        default=os.path.join(os.environ['HOME'], 'Audiobooks'),
                        help='Directory where audio book is copied to')
    parser.add_argument('-m', '--multifile', action='store_true',
                        help='Create one file per CD instead of one big file')
    args = parser.parse_args(argv)
    args.output_dir = os.path.abspath(args.output_dir)
    return args


def main(argv=None):
    """Main script entry point"""
    ret = 0
    conf = None
    args = parse_arguments(argv)
    if args.quiet:
        log_level = logging.WARNING
    elif args.verbose:
        log_level = logging.DEBUG
    else:
        log_level = logging.INFO

    # Setup logging
    logging.basicConfig(level=log_level, format='%(levelname)s:%(message)s')

    # Use current directory as base for working directory
    workdir = os.path.abspath('./aabcde-in-progress')
    conf_file = os.path.abspath(os.path.join(workdir, 'rip.status'))
    mkdir(workdir)
    os.chdir(workdir)

    try:
        # Get configuration
        conf = read_conf(conf_file)

        # Init variables
        ejected = False
        disc_nums = xrange(1, conf['num_discs'] + 1)

        # Extract and encode CDs
        for i in disc_nums:
            if check_disc_status(conf, i):
                continue

            if ejected:
                print "Please insert disc %d" % i
                wait_for_disc()
            else:
                raw_input(("Please insert Disc %d of '%s'.\n"
                           "Press enter to continue..." %
                           (i, conf['title'])).encode('utf-8'))
                run_cmd(['eject', '-t'], True, True)
                wait_for_disc(True)
            rip_disc(conf, i, args.verbose)
            os.chdir(workdir)

            logging.info('Ejecting disk...')
            run_cmd(['eject'])
            ejected = True
            print 'Disc %d successfully extracted!\n' % i

        if not args.multifile:
            # Combine into one monolithic audiobook file
            tgt_dir = args.output_dir
            logging.info('Combining disc files')
            concat_discs(conf, 'all.m4b', args.verbose)
            move_files = [('all.m4b',
                           "%s - %s.m4b" % (conf['author'], conf['title']))]
        else:
            tgt_dir = os.path.join(args.output_dir,
                                   "%s - %s" % (conf['author'], conf['title']))
            move_files = [('disc-%d.m4b' % i,
                           "%s (%d).m4b" % (conf['title'], i)) for
                          i in disc_nums]

        # Move (and rename) output files to final location
        mkdir(tgt_dir)
        for src_file, tgt_file in move_files:
            tgt_path = os.path.join(tgt_dir, tgt_file)
            if not os.path.isfile(tgt_file):
                logging.info('Moving %s -> %s ', src_file, tgt_path)
                shutil.move(src_file, tgt_path)

        # Cleanup
        logging.info('Cleaning up...')
        shutil.rmtree(workdir)
    except KeyboardInterrupt:
        print "\nAborted by user!"
        ret = 1
    finally:
        if os.path.exists(workdir) and conf:
            write_conf(conf, conf_file)
    return ret

if __name__ == '__main__':
    sys.exit(main())
